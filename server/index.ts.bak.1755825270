import express from "express";
import path from "node:path";
import fs from "node:fs/promises";
import helmet from "helmet";
import http from "node:http";

const app = express();
const isProd = process.env.NODE_ENV === "production";
const PORT = Number(process.env.PORT) || 5000;

app.set("trust proxy", 1);
app.use(express.json());

// Security: strict in prod, relaxed in dev so Replit preview (iframe) works
if (isProd) {
  app.use(helmet());
} else {
  app.use(
    helmet({
      contentSecurityPolicy: false,
      frameguard: false,
      hsts: false,
      crossOriginEmbedderPolicy: false,
      crossOriginOpenerPolicy: false,
    })
  );
  app.use((_, res, next) => {
    res.removeHeader("X-Frame-Options");
    res.removeHeader("Strict-Transport-Security");
    res.setHeader(
      "Content-Security-Policy",
      "frame-ancestors 'self' https://*.replit.dev https://*.repl.co https://*.replit.app"
    );
    next();
  });
}

// Health
app.get("/health", (_req, res) => res.status(200).json({ ok: true }));

async function start() {
  // Create a single HTTP server so Vite HMR can attach its WS to it
  const httpServer = http.createServer(app);

  if (!isProd) {
    const vite = await (await import("vite")).createServer({
      root: process.cwd(),
      appType: "custom",
      server: {
        middlewareMode: true,
        // Attach HMR to our HTTP server and force secure WS via Replit proxy
        hmr: {
          server: httpServer,
          protocol: "wss",
          clientPort: 443,
          // host: undefined // default uses location.hostname (works in preview)
        },
      },
    });

    app.use(vite.middlewares);

    // Transform and serve index.html via Vite
    app.use("*", async (req, res, next) => {
      try {
        const url = req.originalUrl;
        let html = await fs.readFile(path.resolve(process.cwd(), "index.html"), "utf-8");
        html = await vite.transformIndexHtml(url, html);
        res.status(200).set({ "Content-Type": "text/html" }).end(html);
      } catch (e: any) {
        vite.ssrFixStacktrace(e);
        next(e);
      }
    });
  } else {
    // Production: serve from dist
    const dist = path.resolve(process.cwd(), "dist");
    app.use(express.static(dist));
    app.get("*", (_req, res) => res.sendFile(path.join(dist, "index.html")));
  }

  httpServer.listen(PORT, "0.0.0.0", () => {
    console.log(`Server running on ${PORT} (${isProd ? "prod" : "dev + Vite middleware + HMR"})`);
  });
}

start().catch((err) => {
  console.error("Failed to start server:", err);
  process.exit(1);
});
